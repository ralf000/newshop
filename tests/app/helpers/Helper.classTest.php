<?php

// namespace app\helpers;

use app\helpers\Helper;
use PHPUnit_Framework_TestCase;

 require_once dirname(dirname(dirname(__DIR__))) . '/app/helpers/Helper.class.php';

 /**
  * Generated by PHPUnit_SkeletonGenerator on 2016-03-03 at 17:08:17.
  */
 class HelperTest extends PHPUnit_Framework_TestCase {

     /**
      * @var Helper2
      */
     protected $object;

     /**
      * Sets up the fixture, for example, opens a network connection.
      * This method is called before a test is executed.
      */
     protected function setUp() {
         $this->object = new Helper;
     }

     /**
      * Tears down the fixture, for example, closes a network connection.
      * This method is called after a test is executed.
      */
     protected function tearDown() {
         
     }

     /**
      * @covers app\helpers\Helper::deleteFile
      */
     public function testDeleteFile() {
         $this->assertTrue($this->object->deleteFile($file = tempnam('', 'tmp')));
     }

     /**
      * @covers app\helpers\Helper::strToLat
      */
     public function testStrToLat() {
         $testStr = 'Тестовое предложение для проверки функции автоматической транлитерации';
         $result  = 'testovoe-predlojenie-dlja-proverki-funktsii-avtomaticheskoy-tranliteratsii';
         $this->assertEquals($this->object->strToLat($testStr), $result);
     }

     /**
      * @covers app\helpers\Helper::generate
      */
     public function testGenerate() {
         $result = $this->object->generate(5);
         $this->assertInternalType('string', $result);
         $this->assertTrue(ctype_alnum($result));
     }

     /**
      * @covers app\helpers\Helper::getSiteConfig
      */
     public function testGetSiteConfig() {
         $result = $this->object->getSiteConfig();
         $this->assertInternalType('array', $result);
         $this->assertArrayHasKey('siteName', $result);
     }

     /**
      * @covers app\helpers\Helper::dateConverter
      */
     public function testDateConverter() {
         $result = $this->object->dateConverter('2016-02-19 17:21:00');
         $actual = '19-02-2016 17:21:00';
         $this->assertEquals($result, $actual);
     }

     /**
      * @covers app\helpers\Helper::tableToBootstrap
      */
     public function testTableToBootstrap() {
         $html   = '<table test class="table table-bordered table-stripped" width="200px" height="100px;">testTest123</table>';
         $result = $this->object->tableToBootstrap($html);
         $actual = '<table class="table table-bordered table-stripped">testTest123</table>';
         $this->assertInternalType('string', $result);
         $this->assertEquals($result, $actual);
     }

     /**
      * @covers app\helpers\Helper::clearUrl

      */
     public function testClearUrl() {
         $url    = 'http://examples.com/sub/subdir?id=1&val=test#hash';
         $result = $this->object->clearUrl($url);
         $actual = '/sub/subdir';
         $this->assertInternalType('string', $result);
         $this->assertEquals($result, $actual);
     }

 }
 